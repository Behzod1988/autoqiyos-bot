import os
import requests
import telebot
from telebot import types
import time
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

print("üöÄ AutoQiyos Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

TOKEN = os.environ.get('BOT_TOKEN')
if not TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–º –ø–æ–ª–ª–∏–Ω–≥–æ–º
bot = telebot.TeleBot(TOKEN, parse_mode='HTML', threaded=False)

# ‚úÖ –§–ò–ö–° –û–®–ò–ë–ö–ò 409: –ñ–¥–µ–º –∏ –æ—á–∏—â–∞–µ–º
print("‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
time.sleep(10)

try:
    bot.remove_webhook()  # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –±—ã–ª
    time.sleep(2)
except:
    pass

# –ë–ê–ó–ê –î–ê–ù–ù–´–•
class CarDatabase:
    def __init__(self):
        self.db_url = "https://raw.githubusercontent.com/Behzod1988/autoqiyos-bot/main/car_database.json"
        self.data = None
        self.load_database()
    
    def load_database(self):
        try:
            response = requests.get(self.db_url, timeout=10)
            self.data = response.json()
            print(f"‚úÖ –ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(self.data['cars'])} –∞–≤—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã: {e}")
            self.data = {"cars": {}}
    
    def find_car(self, car_name):
        if not self.data:
            self.load_database()
        
        car_name_lower = car_name.lower().strip()
        for car_key in self.data["cars"]:
            if car_name_lower in car_key.lower():
                return self.data["cars"][car_key]
        return None

car_db = CarDatabase()

# –ü–†–û–°–¢–û–ô –ü–ê–†–°–ï–† (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
class SimpleParser:
    def __init__(self):
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤")
    
    def get_prices(self, car_name):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ Avtoelon"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥, –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            return {
                "car": car_name,
                "prices": ["15 000 000 —Å—É–º", "16 500 000 —Å—É–º"],
                "status": "success"
            }
        except Exception as e:
            return {"error": str(e), "status": "error"}

parser = SimpleParser()

# –ö–õ–ê–í–ò–ê–¢–£–†–´
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ", "üîç –ù–∞–π—Ç–∏ –∞–≤—Ç–æ")
    markup.add("üåê –ü–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—ã", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    return markup

# –ö–û–ú–ê–ù–î–´
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üöò <b>AutoQiyos - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=['test'])
def test(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ—Ç.")

@bot.message_handler(commands=['debug'])
def debug(message):
    import datetime
    status = f"üîÑ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç\nüìä –ê–≤—Ç–æ –≤ –±–∞–∑–µ: {len(car_db.data['cars'])}\n‚è∞ –í—Ä–µ–º—è: {datetime.datetime.now()}"
    bot.send_message(message.chat.id, status)

@bot.message_handler(commands=['parse'])
def parse_command(message):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω"""
    try:
        parts = message.text.split(' ', 1)
        if len(parts) < 2:
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏: /parse cobalt")
            return
        
        car_name = parts[1].strip()
        msg = bot.send_message(message.chat.id, f"üîç –ò—â—É —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ {car_name}...")
        
        result = parser.get_prices(car_name)
        
        if result.get('status') == 'success':
            response = f"üöó <b>{car_name.upper()}</b>\n\n"
            response += f"üìä –ù–∞–π–¥–µ–Ω–æ: {result['total_found']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
            response += "üí∞ <b>–†–µ–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n\n"
            
            for i, ad in enumerate(result['prices'][:5], 1):
                response += f"{i}. <b>{ad.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
                response += f"   üí∞ {ad.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                if ad.get('year'):
                    response += f"   üóì {ad['year']}\n"
                response += f"   üåê {ad.get('source', 'Avtoelon.uz')}\n\n"
            
        else:
            response = f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è {car_name}"
        
        bot.edit_message_text(
            response, 
            message.chat.id, 
            msg.message_id, 
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda message: message.text == "üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ")
def compare_cars(message):
    bot.send_message(
        message.chat.id,
        "üîß –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n<code>Onix vs Tracker</code>\n<code>Cobalt –ø—Ä–æ—Ç–∏–≤ Nexia</code>",
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: message.text == "üîç –ù–∞–π—Ç–∏ –∞–≤—Ç–æ")
def find_car(message):
    bot.send_message(
        message.chat.id,
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n<code>Cobalt</code>\n<code>Nexia</code>\n<code>Onix</code>",
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: message.text == "üåê –ü–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—ã")
def parse_menu(message):
    bot.send_message(
        message.chat.id,
        "üåê –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /parse –∞–≤—Ç–æ",
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
def about(message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è <b>AutoQiyos</b>\n\n–ë–æ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n/start - –º–µ–Ω—é\n/test - –ø—Ä–æ–≤–µ—Ä–∫–∞\n/debug - —Å—Ç–∞—Ç—É—Å\n/parse - –ø–∞—Ä—Å–∏–Ω–≥",
        parse_mode='HTML'
    )

# –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    text = message.text.strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if " vs " in text.lower() or " –ø—Ä–æ—Ç–∏–≤ " in text.lower():
        try:
            if " vs " in text.lower():
                car1, car2 = text.split(" vs ", 1)
            else:
                car1, car2 = text.split(" –ø—Ä–æ—Ç–∏–≤ ", 1)
            
            car1 = car1.strip()
            car2 = car2.strip()
            
            info1 = car_db.find_car(car1)
            info2 = car_db.find_car(car2)
            
            response = "üîÑ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:</b>\n\n"
            
            if info1:
                response += f"üöó <b>{car1}</b>:\n"
                response += f"üí∞ –¶–µ–Ω–∞: {info1['price']}\n"
                response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info1['engine']}\n"
                response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info1['fuel']}\n\n"
            else:
                response += f"‚ùå {car1} –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            
            if info2:
                response += f"üöô <b>{car2}</b>:\n"
                response += f"üí∞ –¶–µ–Ω–∞: {info2['price']}\n"
                response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info2['engine']}\n"
                response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info2['fuel']}\n\n"
            else:
                response += f"‚ùå {car2} –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            
            bot.send_message(message.chat.id, response, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: Onix vs Tracker")
    
    # –ü–æ–∏—Å–∫ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    else:
        info = car_db.find_car(text)
        if info:
            response = f"üöó <b>{text}</b>\n\n"
            response += f"üí∞ –¶–µ–Ω–∞: {info['price']}\n"
            response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info['engine']}\n"
            response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info['fuel']}\n"
            response += f"üìä –ö–ü–ü: {info['transmission']}\n"
            response += f"üéØ –¢–∏–ø: {info['type']}"
            
            bot.send_message(message.chat.id, response, parse_mode='HTML')
        else:
            bot.send_message(
                message.chat.id,
                f"‚ùå '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                reply_markup=main_menu()
            )

print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É...")
try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    bot.polling(none_stop=True, interval=3, timeout=30)
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
    time.sleep(10)
