import os
import time
import requests
import json
from threading import Thread
from flask import Flask
import telebot
from telebot import types

print("üöÄ AutoQiyos Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')
bot.skip_pending = True  # –§–∏–∫—Å–∏–º –æ—à–∏–±–∫—É 409

# –£–¥–∞–ª—è–µ–º webhook
try:
    bot.delete_webhook(drop_pending_updates=True)
    time.sleep(2)
except:
    pass

# –ü–†–û–°–¢–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–•
class CarDatabase:
    def __init__(self):
        self.db_url = "https://raw.githubusercontent.com/Behzod1988/autoqiyos-bot/main/car_database.json"
        self.data = None
        self.load_database()
    
    def load_database(self):
        try:
            response = requests.get(self.db_url, timeout=10)
            self.data = response.json()
            print(f"‚úÖ –ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(self.data['cars'])} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã: {e}")
            self.data = {"cars": {}}
    
    def find_car(self, car_name):
        if not self.data:
            self.load_database()
        
        car_name_lower = car_name.lower().strip()
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
        for car_key in self.data["cars"]:
            if car_name_lower in car_key.lower():
                return self.data["cars"][car_key]
        
        return None

    def get_price_number(self, price_str):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ (–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É)"""
        try:
            # –£–±–∏—Ä–∞–µ–º $ –∏ –ø—Ä–æ–±–µ–ª—ã, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω
            clean = price_str.replace('$', '').replace(' ', '').split('-')[0]
            return int(clean)
        except:
            return 0

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É
car_db = CarDatabase()

# Flask app –¥–ª—è Railway
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ AutoQiyos Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host='0.0.0.0', port=8080, debug=False)

Thread(target=run_flask, daemon=True).start()

# –ü–†–û–°–¢–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ", "üîé –ù–∞–π—Ç–∏ –∞–≤—Ç–æ")
    markup.add("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    return markup

def back_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return markup

# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üöò <b>AutoQiyos ‚Äî —Å—Ä–∞–≤–Ω–∏ –∞–≤—Ç–æ –ª–µ–≥–∫–æ!</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=['test'])
def test_command(message):
    """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—à–∏–±–æ–∫ –Ω–µ—Ç!")

@bot.message_handler(func=lambda message: message.text == "üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ")
def compare_cars(message):
    bot.send_message(
        message.chat.id,
        "üîß –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n<b>–§–æ—Ä–º–∞—Ç:</b>\n<code>Onix vs Tracker</code>\n–ò–ª–∏\n<code>Onix –ø—Ä–æ—Ç–∏–≤ Tracker</code>",
        parse_mode='HTML',
        reply_markup=back_button()
    )

@bot.message_handler(func=lambda message: message.text == "üîé –ù–∞–π—Ç–∏ –∞–≤—Ç–æ")
def find_car(message):
    bot.send_message(
        message.chat.id,
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>Cobalt</code>",
        parse_mode='HTML',
        reply_markup=back_button()
    )

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
def about(message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è <b>AutoQiyos</b> ‚Äî –±–æ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π!\n\n–ü—Ä–æ—Å—Ç–∞—è –∏ —É–¥–æ–±–Ω–∞—è –≤–µ—Ä—Å–∏—è.",
        parse_mode='HTML',
        reply_markup=back_button()
    )

@bot.message_handler(func=lambda message: message.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def support(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å", url="https://t.me/behzod_islomoff"))
    bot.send_message(message.chat.id, "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    text = message.text.strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ "–Ω–∞–∑–∞–¥" - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    if " vs " in text.lower() or " –ø—Ä–æ—Ç–∏–≤ " in text.lower():
        handle_comparison(message, text)
    else:
        # –ü–æ–∏—Å–∫ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        handle_single_car(message, text)

def handle_comparison(message, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if " vs " in text.lower():
            car1, car2 = text.split(" vs ", 1)
        else:
            car1, car2 = text.split(" –ø—Ä–æ—Ç–∏–≤ ", 1)
        
        car1 = car1.strip()
        car2 = car2.strip()
        
        print(f"üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: '{car1}' –∏ '{car2}'")
        
        info1 = car_db.find_car(car1)
        info2 = car_db.find_car(car2)
        
        response = "üîÑ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:</b>\n\n"
        
        if info1:
            response += f"üöó <b>{car1}</b>:\n"
            response += f"üí∞ –¶–µ–Ω–∞: {info1['price']}\n"
            response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info1['engine']}\n"
            response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info1['fuel']}\n\n"
        else:
            response += f"‚ùå {car1} –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
        
        if info2:
            response += f"üöô <b>{car2}</b>:\n"
            response += f"üí∞ –¶–µ–Ω–∞: {info2['price']}\n"
            response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info2['engine']}\n"
            response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info2['fuel']}\n\n"
        else:
            response += f"‚ùå {car2} –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—ã –µ—Å–ª–∏ –æ–±–∞ –∞–≤—Ç–æ –Ω–∞–π–¥–µ–Ω—ã
        if info1 and info2:
            price1 = car_db.get_price_number(info1['price'])
            price2 = car_db.get_price_number(info2['price'])
            
            if price1 > price2:
                response += f"üí∞ <b>–í—ã–≥–æ–¥–Ω–µ–µ: {car2}</b>"
            elif price2 > price1:
                response += f"üí∞ <b>–í—ã–≥–æ–¥–Ω–µ–µ: {car1}</b>"
            else:
                response += "üí∞ <b>–¶–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ</b>"
        
        bot.send_message(message.chat.id, response, parse_mode='HTML')
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 'Onix vs Tracker'",
            reply_markup=main_menu()
        )

def handle_single_car(message, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    car_info = car_db.find_car(text)
    if car_info:
        response = f"üöó <b>{text}</b>\n\n"
        response += f"üí∞ –¶–µ–Ω–∞: {car_info['price']}\n"
        response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {car_info['engine']}\n"
        response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {car_info['fuel']}\n"
        response += f"üìä –ö–ü–ü: {car_info['transmission']}\n"
        response += f"üéØ –¢–∏–ø: {car_info['type']}\n"
        
        if 'features' in car_info:
            response += f"üîß –û–ø—Ü–∏–∏: {', '.join(car_info['features'][:3])}"
        
        bot.send_message(message.chat.id, response, parse_mode='HTML')
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ.",
            reply_markup=main_menu()
        )

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—à–∏–±–æ–∫ –Ω–µ—Ç!")
bot.infinity_polling()
