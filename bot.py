import os
import requests
import telebot
from telebot import types
import time

print("üöÄ AutoQiyos Bot - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.environ.get('BOT_TOKEN')
if not TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞!")
    exit(1)

print("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–º –ø–æ–ª–ª–∏–Ω–≥–æ–º
bot = telebot.TeleBot(TOKEN, parse_mode='HTML', threaded=False)

# –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–π –±–æ—Ç —Ç–æ—á–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
print("‚è≥ –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞...")
time.sleep(10)

# –ë–ê–ó–ê –î–ê–ù–ù–´–•
class CarDatabase:
    def __init__(self):
        self.db_url = "https://raw.githubusercontent.com/Behzod1988/autoqiyos-bot/main/car_database.json"
        self.data = None
        self.load_database()
    
    def load_database(self):
        try:
            response = requests.get(self.db_url, timeout=10)
            self.data = response.json()
            print(f"‚úÖ –ë–∞–∑–∞: {len(self.data['cars'])} –∞–≤—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã: {e}")
            self.data = {"cars": {}}
    
    def find_car(self, car_name):
        if not self.data:
            self.load_database()
        
        car_name_lower = car_name.lower().strip()
        for car_key in self.data["cars"]:
            if car_name_lower in car_key.lower():
                return self.data["cars"][car_key]
        return None

car_db = CarDatabase()

# –ü–†–û–°–¢–´–ï –ö–ù–û–ü–ö–ò
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ")
    markup.add("üîç –ù–∞–π—Ç–∏ –∞–≤—Ç–æ")
    markup.add("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    return markup

# –ö–û–ú–ê–ù–î–´
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üöò <b>AutoQiyos - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=['test'])
def test(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω.")

@bot.message_handler(commands=['debug'])
def debug(message):
    bot.send_message(message.chat.id, f"üîß –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç\nüöó –ê–≤—Ç–æ –≤ –±–∞–∑–µ: {len(car_db.data['cars'])}")

@bot.message_handler(func=lambda message: message.text == "üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ")
def compare_cars(message):
    bot.send_message(
        message.chat.id,
        "üîß –ù–∞–ø–∏—à–∏ –¥–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n<code>Onix vs Tracker</code>\n<code>Cobalt –ø—Ä–æ—Ç–∏–≤ Nexia</code>",
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: message.text == "üîç –ù–∞–π—Ç–∏ –∞–≤—Ç–æ")
def find_car(message):
    bot.send_message(
        message.chat.id,
        "üîç –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n<code>Cobalt</code>\n<code>Nexia</code>\n<code>Onix</code>",
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
def about(message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è <b>AutoQiyos</b>\n\n–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n\n–ö–æ–º–∞–Ω–¥—ã:\n/start - –º–µ–Ω—é\n/test - –ø—Ä–æ–≤–µ—Ä–∫–∞\n/debug - —Å—Ç–∞—Ç—É—Å",
        parse_mode='HTML'
    )

# –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    text = message.text.strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if " vs " in text.lower() or " –ø—Ä–æ—Ç–∏–≤ " in text.lower():
        try:
            if " vs " in text.lower():
                car1, car2 = text.split(" vs ", 1)
            else:
                car1, car2 = text.split(" –ø—Ä–æ—Ç–∏–≤ ", 1)
            
            car1 = car1.strip()
            car2 = car2.strip()
            
            info1 = car_db.find_car(car1)
            info2 = car_db.find_car(car2)
            
            response = "üîÑ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:</b>\n\n"
            
            if info1:
                response += f"üöó <b>{car1}</b>:\n"
                response += f"üí∞ {info1['price']}\n"
                response += f"‚öôÔ∏è {info1['engine']}\n\n"
            else:
                response += f"‚ùå {car1} –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            
            if info2:
                response += f"üöô <b>{car2}</b>:\n"
                response += f"üí∞ {info2['price']}\n"
                response += f"‚öôÔ∏è {info2['engine']}\n\n"
            else:
                response += f"‚ùå {car2} –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            
            bot.send_message(message.chat.id, response, parse_mode='HTML')
            
        except Exception as e:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π: Onix vs Tracker")
    
    # –ü–æ–∏—Å–∫ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    else:
        info = car_db.find_car(text)
        if info:
            response = f"üöó <b>{text}</b>\n\n"
            response += f"üí∞ {info['price']}\n"
            response += f"‚öôÔ∏è {info['engine']}\n"
            response += f"‚õΩ {info['fuel']}\n"
            response += f"üìä {info['transmission']}"
            
            bot.send_message(message.chat.id, response, parse_mode='HTML')
        else:
            bot.send_message(
                message.chat.id,
                f"‚ùå '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                reply_markup=main_menu()
            )

print("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π polling –±–µ–∑ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏
    bot.polling(none_stop=True, interval=2, timeout=30)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
    time.sleep(10)
