import os
import time
import requests
import json
from threading import Thread, Lock
from flask import Flask
import telebot
from telebot import types
import logging

print("üöÄ AutoQiyos Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get('BOT_TOKEN')
if not TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

bot = telebot.TeleBot(TOKEN, parse_mode='HTML')

# –£–¥–∞–ª—è–µ–º webhook
try:
    bot.delete_webhook(drop_pending_updates=True)
    time.sleep(1)
    logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")

# –£–õ–£–ß–®–ï–ù–ù–´–ô –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
class CarDatabase:
    def __init__(self):
        self.db_url = "https://raw.githubusercontent.com/Behzod1988/autoqiyos-bot/main/car_database.json"
        self.data = None
        self.last_update = 0
        self.update_interval = 3600  # 1 —á–∞—Å
        self.lock = Lock()
        self.load_database()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.update_thread = Thread(target=self.periodic_update, daemon=True)
        self.update_thread.start()
    
    def periodic_update(self):
        """–§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        while True:
            time.sleep(self.update_interval)
            try:
                self.load_database()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def load_database(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
        try:
            with self.lock:
                response = requests.get(self.db_url, timeout=15)
                response.raise_for_status()
                self.data = response.json()
                self.last_update = time.time()
                logger.info(f"‚úÖ –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {len(self.data['cars'])} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã: {e}")
            return False
    
    def find_car(self, car_name):
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        if not self.data:
            if not self.load_database():
                return None
        
        car_name_lower = car_name.lower().strip()
        found_cars = []
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        for car_key in self.data["cars"]:
            if car_name_lower == car_key.lower():
                return self.data["cars"][car_key]
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (—Å –æ—Ü–µ–Ω–∫–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏)
        for car_key in self.data["cars"]:
            key_lower = car_key.lower()
            if (car_name_lower in key_lower or 
                key_lower in car_name_lower or
                any(word in key_lower for word in car_name_lower.split())):
                found_cars.append((car_key, self.data["cars"][car_key]))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if found_cars:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ–±—ã—á–Ω–æ —Ç–æ—á–Ω–µ–µ)
            found_cars.sort(key=lambda x: len(x[0]))
            return found_cars[0][1]
        
        return None
    
    def get_all_brands(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        if not self.data:
            return []
        return list(self.data["cars"].keys())
    
    def force_update(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã"""
        return self.load_database()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É
car_db = CarDatabase()

# Flask app –¥–ª—è Railway
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ AutoQiyos Bot —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/health')
def health():
    return {"status": "healthy", "cars_loaded": len(car_db.data["cars"]) if car_db.data else 0}

@app.route('/update-db')
def update_db():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã"""
    if car_db.force_update():
        return {"status": "success", "cars_count": len(car_db.data["cars"])}
    return {"status": "error"}, 500

def run_flask():
    app.run(host='0.0.0.0', port=8080, debug=False)

Thread(target=run_flask, daemon=True).start()

# –£–õ–£–ß–®–ï–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ", "üîé –ù–∞–π—Ç–∏ –∞–≤—Ç–æ")
    markup.add("üìä –í—Å–µ –º–∞—Ä–∫–∏", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É")
    markup.add("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    return markup

def back_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    return markup

def brands_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –º–∞—Ä–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    popular_brands = ["Chevrolet", "Toyota", "Hyundai", "Kia", "Nexia", "Gentra", "Cobalt", "Tracker", "Onix"]
    for brand in popular_brands:
        markup.add(brand)
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    return markup

# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üöò <b>AutoQiyos ‚Äî —Å—Ä–∞–≤–Ω–∏ –∞–≤—Ç–æ –ª–µ–≥–∫–æ!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Å—Ä–∞–≤–Ω–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Ü–µ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=['update'])
def update_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã"""
    msg = bot.send_message(message.chat.id, "üîÑ –û–±–Ω–æ–≤–ª—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    if car_db.force_update():
        bot.edit_message_text(
            f"‚úÖ –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\nüìä –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(car_db.data['cars'])}",
            message.chat.id,
            msg.message_id
        )
    else:
        bot.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            message.chat.id,
            msg.message_id
        )

@bot.message_handler(func=lambda message: message.text == "üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ")
def start_comparison(message):
    bot.send_message(
        message.chat.id,
        "üîß –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:\n\n"
        "<b>–§–æ—Ä–º–∞—Ç:</b>\n"
        "<code>Onix vs Tracker</code>\n"
        "–ò–ª–∏\n"
        "<code>Onix –ø—Ä–æ—Ç–∏–≤ Tracker</code>\n\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞:",
        parse_mode='HTML',
        reply_markup=brands_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "üîé –ù–∞–π—Ç–∏ –∞–≤—Ç–æ")
def search_car(message):
    bot.send_message(
        message.chat.id,
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>Cobalt</code>, <code>Nexia 3</code>",
        parse_mode='HTML',
        reply_markup=brands_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "üìä –í—Å–µ –º–∞—Ä–∫–∏")
def show_all_brands(message):
    brands = car_db.get_all_brands()
    if brands:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã
        brands_text = "\n".join(sorted(brands)[:50])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 50
        text = f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä–∫–∏ ({len(brands)}):\n\n{brands_text}"
        if len(brands) > 50:
            text += f"\n\n... –∏ –µ—â–µ {len(brands) - 50} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"
    else:
        text = "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    
    bot.send_message(message.chat.id, text, reply_markup=back_button())

@bot.message_handler(func=lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É")
def update_db_handler(message):
    update_command(message)

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
def about_project(message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è <b>AutoQiyos</b> ‚Äî —É–º–Ω—ã–π –±–æ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π!\n\n"
        "üìä <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫\n"
        "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã\n"
        "‚Ä¢ –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n\n"
        "üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è",
        parse_mode='HTML',
        reply_markup=back_button()
    )

@bot.message_handler(func=lambda message: message.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def contact_admin(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", url="https://t.me/behzod_islomoff"))
    markup.add(types.InlineKeyboardButton("üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", url="https://github.com/Behzod1988/autoqiyos-bot/issues"))
    bot.send_message(
        message.chat.id,
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º:",
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def back_to_menu(message):
    bot.send_message(message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –£–õ–£–ß–®–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–†–ê–í–ù–ï–ù–ò–Ø
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    if " vs " in text.lower() or " –ø—Ä–æ—Ç–∏–≤ " in text.lower():
        handle_comparison(message, text)
    else:
        # –ü–æ–∏—Å–∫ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        handle_single_car(message, text)

def handle_comparison(message, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if " vs " in text.lower():
            car1, car2 = text.split(" vs ", 1)
            separator = "vs"
        else:
            car1, car2 = text.split(" –ø—Ä–æ—Ç–∏–≤ ", 1)
            separator = "–ø—Ä–æ—Ç–∏–≤"
        
        car1 = car1.strip()
        car2 = car2.strip()
        
        logger.info(f"üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: '{car1}' {separator} '{car2}'")
        
        info1 = car_db.find_car(car1)
        info2 = car_db.find_car(car2)
        
        response = format_comparison_response(car1, car2, info1, info2)
        bot.send_message(message.chat.id, response, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 'Onix vs Tracker'",
            reply_markup=brands_keyboard()
        )

def format_comparison_response(car1, car2, info1, info2):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if info1 and info2:
        response = f"üîÑ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:</b>\n\n"
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—ã
        price1 = int(info1['price'].replace('$', '').replace(' ', ''))
        price2 = int(info2['price'].replace('$', '').replace(' ', ''))
        price_diff = price1 - price2
        
        response += f"üöó <b>{car1}</b>:\n"
        response += f"üí∞ –¶–µ–Ω–∞: {info1['price']}"
        if price_diff != 0:
            response += f" ({'+' if price_diff > 0 else ''}{price_diff}$)"
        response += f"\n‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info1['engine']}\n"
        response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info1['fuel']} –ª/100km\n"
        response += f"üìä –ö–ü–ü: {info1['transmission']}\n"
        response += f"üéØ –¢–∏–ø: {info1['type']}\n\n"
        
        response += f"üöô <b>{car2}</b>:\n" 
        response += f"üí∞ –¶–µ–Ω–∞: {info2['price']}"
        if price_diff != 0:
            response += f" ({'-' if price_diff > 0 else '+'}{abs(price_diff)}$)"
        response += f"\n‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info2['engine']}\n"
        response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info2['fuel']} –ª/100km\n"
        response += f"üìä –ö–ü–ü: {info2['transmission']}\n"
        response += f"üéØ –¢–∏–ø: {info2['type']}\n\n"
        
        # –í—ã–≤–æ–¥ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ —Ü–µ–Ω–µ
        if price_diff > 0:
            response += f"üèÜ <b>–ü–æ —Ü–µ–Ω–µ –≤—ã–≥–æ–¥–Ω–µ–µ: {car2}</b>\n\n"
        elif price_diff < 0:
            response += f"üèÜ <b>–ü–æ —Ü–µ–Ω–µ –≤—ã–≥–æ–¥–Ω–µ–µ: {car1}</b>\n\n"
        else:
            response += f"üí∞ <b>–¶–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ</b>\n\n"
        
        response += f"üìÖ <i>–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: {car_db.data.get('last_updated', 'N/A')}</i>"
        
    elif info1:
        response = format_single_car_response(car1, info1)
        response += f"\n\n‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å '{car2}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"
    elif info2:
        response = format_single_car_response(car2, info2)
        response += f"\n\n‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å '{car1}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"
    else:
        response = "‚ùå –û–±–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
        response += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
    
    return response

def handle_single_car(message, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    car_info = car_db.find_car(text)
    if car_info:
        response = format_single_car_response(text, car_info)
        bot.send_message(message.chat.id, response, parse_mode='HTML')
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\n"
            "‚Ä¢ –ò–ª–∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –¥–≤–∞ –∞–≤—Ç–æ: 'Onix vs Tracker'",
            reply_markup=brands_keyboard()
        )

def format_single_car_response(car_name, car_info):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    response = f"üöó <b>{car_name}</b>\n\n"
    response += f"üí∞ –¶–µ–Ω–∞: {car_info['price']}\n"
    response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {car_info['engine']}\n"
    response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {car_info['fuel']} –ª/100km\n"
    response += f"üìä –ö–ü–ü: {car_info['transmission']}\n"
    response += f"üéØ –¢–∏–ø: {car_info['type']}\n"
    response += f"üìÖ –ì–æ–¥—ã: {car_info['years']}\n\n"
    
    if 'features' in car_info and car_info['features']:
        features = car_info['features']
        if len(features) > 5:
            response += f"üîß –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏: {', '.join(features[:5])}...\n"
        else:
            response += f"üîß –û–ø—Ü–∏–∏: {', '.join(features)}\n"
    
    response += f"\nüìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {car_db.data.get('last_updated', 'N/A')}"
    
    return response

logger.info("‚úÖ –ë–æ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω!")
try:
    bot.infinity_polling(timeout=60, long_polling_timeout=30)
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
