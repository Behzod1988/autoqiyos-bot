import os
import time
import requests
import json
from threading import Thread
from flask import Flask
import telebot
from telebot import types

print("üöÄ AutoQiyos Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')

# –£–¥–∞–ª—è–µ–º webhook
try:
    bot.delete_webhook(drop_pending_updates=True)
    time.sleep(1)
except:
    pass

# –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
class CarDatabase:
    def __init__(self):
        # –ó–ê–ú–ï–ù–ò–¢–ï '–í–ê–®_USERNAME' –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô USERNAME GITHUB!
        self.db_url = "https://raw.githubusercontent.com/–í–ê–®_USERNAME/autoqiyos-bot/main/car_database.json"
        self.data = None
    
    def load_database(self):
        try:
            response = requests.get(self.db_url, timeout=10)
            self.data = response.json()
            print(f"‚úÖ –ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(self.data['cars'])} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã: {e}")
            self.data = {"cars": {}}
    
    def find_car(self, car_name):
        if not self.data:
            self.load_database()
        
        car_name_lower = car_name.lower().strip()
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        for car_key in self.data["cars"]:
            if car_name_lower == car_key.lower():
                return self.data["cars"][car_key]
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        for car_key in self.data["cars"]:
            if car_name_lower in car_key.lower() or car_key.lower() in car_name_lower:
                return self.data["cars"][car_key]
        
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É
car_db = CarDatabase()

# Flask app
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ AutoQiyos Bot —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host='0.0.0.0', port=8080, debug=False)

Thread(target=run_flask, daemon=True).start()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ", "üîé –ü–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É")
    markup.add("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è")
    return markup

def back_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üöò <b>AutoQiyos ‚Äî —Å—Ä–∞–≤–Ω–∏ –∞–≤—Ç–æ –ª–µ–≥–∫–æ!</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda message: message.text == "üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ")
def start_comparison(message):
    bot.send_message(
        message.chat.id,
        "üîß –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:\n\n<b>–§–æ—Ä–º–∞—Ç:</b>\nOnix vs Tracker\n–ò–ª–∏\nOnix –ø—Ä–æ—Ç–∏–≤ Tracker",
        parse_mode='HTML',
        reply_markup=back_button()
    )

@bot.message_handler(func=lambda message: message.text == "üîé –ü–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É")
def start_search(message):
    bot.send_message(
        message.chat.id,
        "üïµÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏–ª–∏ –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
        reply_markup=back_button()
    )

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
def about_project(message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è <b>AutoQiyos</b> ‚Äî –±–æ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–≤—Ç–æ —Å —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!\n\n–¢–µ–ø–µ—Ä—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏!",
        parse_mode='HTML',
        reply_markup=back_button()
    )

@bot.message_handler(func=lambda message: message.text == "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è")
def contact_admin(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url="https://t.me/behzod_islomoff"))
    bot.send_message(message.chat.id, "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def back_to_menu(message):
    bot.send_message(message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–†–ê–í–ù–ï–ù–ò–Ø –ê–í–¢–û - –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–û–°–õ–ï–î–ù–ò–ú
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
    if " vs " in text.lower() or " –ø—Ä–æ—Ç–∏–≤ " in text.lower():
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            if " vs " in text:
                car1, car2 = text.split(" vs ", 1)
            else:
                car1, car2 = text.split(" –ø—Ä–æ—Ç–∏–≤ ", 1)
            
            car1 = car1.strip()
            car2 = car2.strip()
            
            print(f"üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: '{car1}' vs '{car2}'")
            
            info1 = car_db.find_car(car1)
            info2 = car_db.find_car(car2)
            
            if info1 and info2:
                response = f"üîÑ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:</b>\n\n"
                
                response += f"üöó <b>{car1}</b>:\n"
                response += f"üí∞ –¶–µ–Ω–∞: {info1['price']}$\n"
                response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info1['engine']}\n"
                response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info1['fuel']} –ª/100km\n"
                response += f"üìä –ö–ü–ü: {info1['transmission']}\n"
                response += f"üéØ –¢–∏–ø: {info1['type']}\n\n"
                
                response += f"üöô <b>{car2}</b>:\n" 
                response += f"üí∞ –¶–µ–Ω–∞: {info2['price']}$\n"
                response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info2['engine']}\n"
                response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info2['fuel']} –ª/100km\n"
                response += f"üìä –ö–ü–ü: {info2['transmission']}\n"
                response += f"üéØ –¢–∏–ø: {info2['type']}\n\n"
                
                response += f"üìÖ <i>–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: {car_db.data.get('last_updated', 'N/A')}</i>"
                
            elif info1:
                response = f"‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å '{car2}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ\n\n"
                response += f"üöó <b>{car1}</b>:\n"
                response += f"üí∞ –¶–µ–Ω–∞: {info1['price']}$\n"
                response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info1['engine']}\n"
                response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info1['fuel']} –ª/100km"
                
            elif info2:
                response = f"‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å '{car1}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ\n\n"
                response += f"üöô <b>{car2}</b>:\n"
                response += f"üí∞ –¶–µ–Ω–∞: {info2['price']}$\n"
                response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info2['engine']}\n"
                response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info2['fuel']} –ª/100km"
                
            else:
                response = "‚ùå –û–±–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                
            bot.send_message(message.chat.id, response, parse_mode='HTML')
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 'Onix vs Tracker'")
    
    else:
        # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –∏—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–º –∞–≤—Ç–æ
        car_info = car_db.find_car(text)
        if car_info:
            response = f"üöó <b>{text}</b>\n\n"
            response += f"üí∞ –¶–µ–Ω–∞: {car_info['price']}$\n"
            response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {car_info['engine']}\n"
            response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {car_info['fuel']} –ª/100km\n"
            response += f"üìä –ö–ü–ü: {car_info['transmission']}\n"
            response += f"üéØ –¢–∏–ø: {car_info['type']}\n"
            response += f"üìÖ –ì–æ–¥—ã: {car_info['years']}\n\n"
            response += f"üîß –û–ø—Ü–∏–∏: {', '.join(car_info['features'])}"
            bot.send_message(message.chat.id, response, parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=main_menu())

print("‚úÖ –ë–æ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω!")
bot.infinity_polling()
