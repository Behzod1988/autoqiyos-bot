import os
import requests
from flask import Flask
from threading import Thread
import telebot
from telebot import types
from bs4 import BeautifulSoup

print("üöÄ AutoQiyos Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')
bot.skip_pending = True

# –£–¥–∞–ª—è–µ–º webhook
try:
    bot.delete_webhook(drop_pending_updates=True)
    print("‚úÖ Webhook –æ—á–∏—â–µ–Ω")
except:
    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ webhook")

# –ü–†–û–°–¢–û–ô –ü–ê–†–°–ï–† –í–ù–£–¢–†–ò –§–ê–ô–õ–ê
class SimpleParser:
    def __init__(self):
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤")
    
    def get_prices(self, car_name):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ Avtoelon"""
        try:
            url = f"https://avtoelon.uz/uz/avto/avtomobili-{car_name.lower()}/"
            print(f"üîç –ü–∞—Ä—Å–∏–º: {url}")
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # –ò—â–µ–º —Ü–µ–Ω—ã
                prices = []
                for text in soup.stripped_strings:
                    if '$' in text or '—Å—É–º' in text:
                        clean = text.strip()
                        if len(clean) < 50:
                            prices.append(clean)
                
                return {
                    "car": car_name,
                    "prices": prices[:3],
                    "url": url,
                    "status": "success"
                }
            else:
                return {"error": f"–û—à–∏–±–∫–∞ {response.status_code}", "status": "error"}
                
        except Exception as e:
            return {"error": str(e), "status": "error"}

# –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
parser = SimpleParser()

# –ë–ê–ó–ê –î–ê–ù–ù–´–•
class CarDatabase:
    def __init__(self):
        self.db_url = "https://raw.githubusercontent.com/Behzod1988/autoqiyos-bot/main/car_database.json"
        self.data = None
        self.load_database()
    
    def load_database(self):
        try:
            response = requests.get(self.db_url, timeout=10)
            self.data = response.json()
            print(f"‚úÖ –ë–∞–∑–∞: {len(self.data['cars'])} –∞–≤—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã: {e}")
            self.data = {"cars": {}}
    
    def find_car(self, car_name):
        if not self.data:
            self.load_database()
        
        car_name_lower = car_name.lower().strip()
        for car_key in self.data["cars"]:
            if car_name_lower in car_key.lower():
                return self.data["cars"][car_key]
        return None

car_db = CarDatabase()

# Flask app
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ AutoQiyos Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/health')
def health():
    return {"status": "ok"}

def run_flask():
    app.run(host='0.0.0.0', port=8080, debug=False)

Thread(target=run_flask, daemon=True).start()

# –ü–†–û–°–¢–´–ï –ö–ù–û–ü–ö–ò
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ", "üåê –ü–∞—Ä—Å–∏—Ç—å Avtoelon")
    markup.add("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    return markup

# –ö–û–ú–ê–ù–î–´
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üöò <b>AutoQiyos Bot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=['test'])
def test(message):
    """–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@bot.message_handler(commands=['parse'])
def parse_command(message):
    """–ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    try:
        parts = message.text.split(' ', 1)
        if len(parts) < 2:
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏: /parse cobalt")
            return
        
        car_name = parts[1].strip()
        msg = bot.send_message(message.chat.id, f"üîç –ò—â—É {car_name}...")
        
        result = parser.get_prices(car_name)
        
        if result.get('status') == 'success':
            response = f"üöó <b>{car_name.upper()}</b>\n\n"
            
            if result['prices']:
                response += "üí∞ <b>–ù–∞–π–¥–µ–Ω—ã —Ü–µ–Ω—ã:</b>\n"
                for price in result['prices']:
                    response += f"‚Ä¢ {price}\n"
            else:
                response += "‚ùå –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            response += f"\nüîó <a href='{result['url']}'>–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Avtoelon</a>"
        else:
            response = f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}"
        
        bot.edit_message_text(response, message.chat.id, msg.message_id, parse_mode='HTML')
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda message: message.text == "üåê –ü–∞—Ä—Å–∏—Ç—å Avtoelon")
def parse_menu(message):
    bot.send_message(
        message.chat.id,
        "üîç –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n–ü—Ä–∏–º–µ—Ä: Cobalt, Nexia, Spark",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda message: message.text == "üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ")
def compare_menu(message):
    bot.send_message(
        message.chat.id,
        "üîß –ù–∞–ø–∏—à–∏ –¥–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n–§–æ—Ä–º–∞—Ç: Onix vs Tracker",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda message: message.text == "üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
def database_menu(message):
    bot.send_message(
        message.chat.id,
        "üìä –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
def about(message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è <b>AutoQiyos Bot</b>\n\n"
        "–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å\n"
        "/test - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞\n"
        "/parse –∞–≤—Ç–æ - –ø–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—ã",
        parse_mode='HTML',
        reply_markup=main_menu()
    )

# –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    text = message.text.strip()
    
   
