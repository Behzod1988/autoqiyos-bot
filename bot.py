import os
import requests
from flask import Flask
import telebot
from telebot import types

print("üöÄ AutoQiyos Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
from parsers.simple_parser import SimpleParser

TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')
bot.skip_pending = True

# –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
parser = SimpleParser()

# –ë–ê–ó–ê –î–ê–ù–ù–´–•
class CarDatabase:
    def __init__(self):
        self.db_url = "https://raw.githubusercontent.com/Behzod1988/autoqiyos-bot/main/car_database.json"
        self.data = None
        self.load_database()
    
    def load_database(self):
        try:
            response = requests.get(self.db_url, timeout=10)
            self.data = response.json()
            print(f"‚úÖ –ë–∞–∑–∞: {len(self.data['cars'])} –∞–≤—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã: {e}")
            self.data = {"cars": {}}
    
    def find_car(self, car_name):
        if not self.data:
            self.load_database()
        
        for car_key in self.data["cars"]:
            if car_name.lower() in car_key.lower():
                return self.data["cars"][car_key]
        return None

car_db = CarDatabase()

# Flask app
app = Flask(__name__)
@app.route('/')
def home():
    return "ü§ñ AutoQiyos Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# –ü–†–û–°–¢–´–ï –ö–ù–û–ü–ö–ò
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ", "üåê –ü–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—ã")
    markup.add("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    return markup

# –ö–û–ú–ê–ù–î–´
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üöò <b>AutoQiyos —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º!</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=['parse'])
def parse_car(message):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥"""
    try:
        parts = message.text.split(' ', 1)
        if len(parts) < 2:
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏: /parse cobalt")
            return
        
        car_name = parts[1].strip()
        msg = bot.send_message(message.chat.id, f"üîç –ò—â—É {car_name}...")
        
        result = parser.get_prices(car_name)
        
        if result.get('status') == 'success':
            response = f"üöó <b>{car_name.upper()}</b>\n\n"
            
            if result['prices']:
                response += "üí∞ <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã:</b>\n"
                for price in result['prices']:
                    response += f"‚Ä¢ {price}\n"
            else:
                response += "‚ùå –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            response += f"\nüîó <a href='{result['url']}'>–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Avtoelon</a>"
        else:
            response = f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        
        bot.edit_message_text(response, message.chat.id, msg.message_id, parse_mode='HTML')
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda message: message.text == "üåê –ü–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—ã")
def parse_menu(message):
    bot.send_message(
        message.chat.id,
        "üîç –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ:\n\n–ü—Ä–∏–º–µ—Ä: Cobalt, Nexia, Spark",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda message: message.text == "üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ")
def compare_menu(message):
    bot.send_message(
        message.chat.id,
        "üîß –ù–∞–ø–∏—à–∏ –¥–≤–∞ –∞–≤—Ç–æ:\n\n–§–æ—Ä–º–∞—Ç: Onix vs Tracker",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
def about(message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è <b>AutoQiyos</b>\n–ü–∞—Ä—Å–∏–º —Ü–µ–Ω—ã —Å Avtoelon.uz\n\n–ö–æ–º–∞–Ω–¥–∞: /parse –∞–≤—Ç–æ",
        parse_mode='HTML',
        reply_markup=main_menu()
    )

# –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text.strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    if " vs " in text.lower() or " –ø—Ä–æ—Ç–∏–≤ " in text.lower():
        try:
            if " vs " in text.lower():
                car1, car2 = text.split(" vs ", 1)
            else:
                car1, car2 = text.split(" –ø—Ä–æ—Ç–∏–≤ ", 1)
            
            car1 = car1.strip()
            car2 = car2.strip()
            
            info1 = car_db.find_car(car1)
            info2 = car_db.find_car(car2)
            
            response = "üîÑ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:</b>\n\n"
            
            if info1:
                response += f"üöó <b>{car1}</b>:\n"
                response += f"üí∞ {info1['price']}\n"
                response += f"‚öôÔ∏è {info1['engine']}\n\n"
            else:
                response += f"‚ùå {car1} –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            
            if info2:
                response += f"üöô <b>{car2}</b>:\n"
                response += f"üí∞ {info2['price']}\n"
                response += f"‚öôÔ∏è {info2['engine']}\n\n"
            else:
                response += f"‚ùå {car2} –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            
            bot.send_message(message.chat.id, response, parse_mode='HTML')
            
        except Exception as e:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π: Onix vs Tracker")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç - –ø–∞—Ä—Å–∏–º
    else:
        msg = bot.send_message(message.chat.id, f"üîç –ò—â—É '{text}'...")
        result = parser.get_prices(text)
        
        if result.get('status') == 'success':
            response = f"üöó <b>{text.upper()}</b>\n\n"
            
            if result['prices']:
                response += "üí∞ <b>–¶–µ–Ω—ã:</b>\n"
                for price in result['prices']:
                    response += f"‚Ä¢ {price}\n"
            else:
                response += "‚ùå –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            response += f"\nüîó <a href='{result['url']}'>–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Avtoelon</a>"
        else:
            response = f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {text}"
        
        bot.edit_message_text(response, message.chat.id, msg.message_id, parse_mode='HTML')

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.infinity_polling()
