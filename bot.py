import os
import requests
import telebot
from telebot import types
from flask import Flask
from threading import Thread
import time

print("üöÄ AutoQiyos Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')

# ‚úÖ –§–ò–ö–°–ò–ú –û–®–ò–ë–ö–£ 409
bot.skip_pending = True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

# –£–¥–∞–ª—è–µ–º webhook –∏ –¥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
try:
    bot.delete_webhook(drop_pending_updates=True)
    print("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
    time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Å—Ç–∞—Ä–æ–º—É –±–æ—Ç—É
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ webhook: {e}")

# –ë–ê–ó–ê –î–ê–ù–ù–´–•
class CarDatabase:
    def __init__(self):
        self.db_url = "https://raw.githubusercontent.com/Behzod1988/autoqiyos-bot/main/car_database.json"
        self.data = None
        self.load_database()
    
    def load_database(self):
        try:
            response = requests.get(self.db_url, timeout=10)
            self.data = response.json()
            print(f"‚úÖ –ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(self.data['cars'])} –∞–≤—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã: {e}")
            self.data = {"cars": {}}
    
    def find_car(self, car_name):
        if not self.data:
            self.load_database()
        
        car_name_lower = car_name.lower().strip()
        for car_key in self.data["cars"]:
            if car_name_lower in car_key.lower():
                return self.data["cars"][car_key]
        return None

car_db = CarDatabase()

# Flask app
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ AutoQiyos Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/health')
def health():
    return {"status": "healthy", "cars": len(car_db.data["cars"])}

def run_flask():
    app.run(host='0.0.0.0', port=8080, debug=False)

Thread(target=run_flask, daemon=True).start()

# –ö–õ–ê–í–ò–ê–¢–£–†–´
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ", "üîç –ù–∞–π—Ç–∏ –∞–≤—Ç–æ")
    markup.add("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    return markup

def back_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return markup

# –ö–û–ú–ê–ù–î–´
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üöò <b>AutoQiyos - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=['test'])
def test(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—à–∏–±–æ–∫ –Ω–µ—Ç.")

@bot.message_handler(commands=['restart'])
def restart(message):
    bot.send_message(message.chat.id, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.stop_polling()
    time.sleep(2)
    start_polling()

@bot.message_handler(func=lambda message: message.text == "üöó –°—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ")
def compare_cars(message):
    bot.send_message(
        message.chat.id,
        "üîß –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:\n\n<b>–§–æ—Ä–º–∞—Ç:</b>\n<code>Onix vs Tracker</code>",
        parse_mode='HTML',
        reply_markup=back_button()
    )

@bot.message_handler(func=lambda message: message.text == "üîç –ù–∞–π—Ç–∏ –∞–≤—Ç–æ")
def find_car(message):
    bot.send_message(
        message.chat.id,
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ:",
        reply_markup=back_button()
    )

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
def about(message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è <b>AutoQiyos</b>\n\n–ë–æ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n\n"
        "üöó –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n"
        "üîç –ò—â–∏—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
        "üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã",
        parse_mode='HTML',
        reply_markup=back_button()
    )

@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    text = message.text.strip()
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if " vs " in text.lower() or " –ø—Ä–æ—Ç–∏–≤ " in text.lower():
        try:
            if " vs " in text.lower():
                car1, car2 = text.split(" vs ", 1)
            else:
                car1, car2 = text.split(" –ø—Ä–æ—Ç–∏–≤ ", 1)
            
            car1 = car1.strip()
            car2 = car2.strip()
            
            info1 = car_db.find_car(car1)
            info2 = car_db.find_car(car2)
            
            response = "üîÑ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:</b>\n\n"
            
            if info1:
                response += f"üöó <b>{car1}</b>:\n"
                response += f"üí∞ –¶–µ–Ω–∞: {info1['price']}\n"
                response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info1['engine']}\n"
                response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info1['fuel']}\n\n"
            else:
                response += f"‚ùå {car1} –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            
            if info2:
                response += f"üöô <b>{car2}</b>:\n"
                response += f"üí∞ –¶–µ–Ω–∞: {info2['price']}\n"
                response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info2['engine']}\n"
                response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info2['fuel']}\n\n"
            else:
                response += f"‚ùå {car2} –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            
            bot.send_message(message.chat.id, response, parse_mode='HTML')
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: Onix vs Tracker")
    
    # –ü–æ–∏—Å–∫ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    else:
        info = car_db.find_car(text)
        if info:
            response = f"üöó <b>{text}</b>\n\n"
            response += f"üí∞ –¶–µ–Ω–∞: {info['price']}\n"
            response += f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {info['engine']}\n"
            response += f"‚õΩ –†–∞—Å—Ö–æ–¥: {info['fuel']}\n"
            response += f"üìä –ö–ü–ü: {info['transmission']}\n"
            response += f"üéØ –¢–∏–ø: {info['type']}"
            
            bot.send_message(message.chat.id, response, parse_mode='HTML')
        else:
            bot.send_message(
                message.chat.id,
                f"‚ùå '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                reply_markup=main_menu()
            )

# –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ü–û–õ–õ–ò–ù–ì–ê
def start_polling():
    print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥...")
    try:
        bot.infinity_polling(timeout=60, long_polling_timeout=30)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞: {e}")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
        start_polling()

print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
start_polling()
